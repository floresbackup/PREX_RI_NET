<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>
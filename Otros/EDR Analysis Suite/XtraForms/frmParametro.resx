<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="dslSQL.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>102, 17</value>
  </metadata>
  <data name="dslSQL.DefinitionXml" xml:space="preserve">
    <value>&lt;?xml version="1.0"?&gt;
&lt;SyntaxLanguages&gt;
	&lt;!-- SQL Language Definition --&gt;
	&lt;SyntaxLanguage Key="SQL" LanguageDefinitionVersion="4.0" Secure="False" WordContainsAdditionalCharacters="@_" xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition"&gt;
		&lt;!-- String Properties --&gt;
		&lt;Properties&gt;
			&lt;Property Key="Creator" Value="Actipro Software LLC" /&gt;
			&lt;Property Key="Copyright" Value="Copyright (c) 2001-2008 Actipro Software LLC.  All rights reserved." /&gt;
		&lt;/Properties&gt;
		&lt;!-- Triggers --&gt;
		&lt;Triggers&gt;
			&lt;KeyPressTrigger Key="TRG001" Character=" "&gt;
				&lt;KeyPressTriggerValidStates&gt;
					&lt;KeyPressTriggerValidState State="DefaultState" /&gt;
				&lt;/KeyPressTriggerValidStates&gt;
			&lt;/KeyPressTrigger&gt;
			&lt;KeyPressTrigger Key="TRG002" Character=","&gt;
				&lt;KeyPressTriggerValidStates&gt;
					&lt;KeyPressTriggerValidState State="DefaultState" /&gt;
				&lt;/KeyPressTriggerValidStates&gt;
			&lt;/KeyPressTrigger&gt;
		&lt;/Triggers&gt;
		&lt;!-- Highlighting Styles --&gt;
		&lt;Styles&gt;
			&lt;Style Key="DefaultStyle" Name="Text" ForeColor="#000000" BorderColor="#000000" StrikeOutColor="#000000" UnderlineColor="#000000" /&gt;
			&lt;Style Key="ReservedWordStyle" Name="Reserved Word" ForeColor="#0000FF" /&gt;
			&lt;Style Key="FunctionStyle" Name="Function" ForeColor="#FF00FF" /&gt;
			&lt;Style Key="OperatorStyle" Name="Operator" ForeColor="#808080" /&gt;
			&lt;Style Key="DataTypeStyle" Name="Data Type" ForeColor="#0000FF" /&gt;
			&lt;Style Key="VariableStyle" Name="Variable" ForeColor="#008000" /&gt;
			&lt;Style Key="SystemVariableStyle" Name="System Variable" ForeColor="#008000" Bold="True" /&gt;
			&lt;Style Key="NumberStyle" Name="Number" ForeColor="#800000" Bold="True" /&gt;
			&lt;Style Key="StringDelimiterStyle" Name="String Delimiter" ForeColor="#FF0000" /&gt;
			&lt;Style Key="StringDefaultStyle" Name="String Default" ForeColor="#FF0000" /&gt;
			&lt;Style Key="SquareStringDelimiterStyle" Name="Square String Delimiter" ForeColor="#000000" /&gt;
			&lt;Style Key="SquareStringDefaultStyle" Name="Square String Default" ForeColor="#000000" /&gt;
			&lt;Style Key="CommentDelimiterStyle" Name="Comment Delimiter" ForeColor="#008080" /&gt;
			&lt;Style Key="CommentDefaultStyle" Name="Comment Default" ForeColor="#008080" /&gt;
		&lt;/Styles&gt;
		&lt;!-- Macros --&gt;
		&lt;Macros /&gt;
		&lt;!-- States --&gt;
		&lt;States&gt;
			&lt;!-- DefaultState State --&gt;
			&lt;State Key="DefaultState" TokenKey="DefaultToken" Style="DefaultStyle"&gt;
				&lt;!-- Pattern Groups --&gt;
				&lt;PatternGroups&gt;
					&lt;RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" /&gt;
					&lt;RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" /&gt;
					&lt;ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" /&gt;
					&lt;ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" /&gt;
					&lt;ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z"&gt;
						&lt;ExplicitPatterns&gt;
							ADD ALTER AS ASC AUTHORIZATION BACKUP BEGIN BREAK BROWSE BULK 
							BY CASCADE CHECK CHECKPOINT CLOSE CLUSTERED COLUMN COMMIT COMMITTED COMPUTE 
							CONFIRM CONSTRAINT CONTAINS CONTINUE CONTROLROW CREATE CROSS CURRENT CURRENT_DATE CURRENT_TIME 
							CURSOR DATABASE DBCC DEALLOCATE DECLARE DEFAULT DELETE DENY DESC DISK 
							DISTINCT DISTRIBUTED DROP DUMMY DUMP ELSE END ERRLVL ERROREXIT ESCAPE 
							EXCEPT EXEC EXECUTE EXIT FETCH FILE FILLFACTOR FLOPPY FOR FOREIGN 
							FREETEXT FROM FULL FUNCTION GO GOTO GRANT GROUP HAVING HOLDLOCK 
							IDENTITY_INSERT IDENTITYCOL IF INDEX INNER INSERT INTERSECT INTO IS ISOLATION 
							KEY KILL LEVEL LINENO LOAD MIRROREXIT NEXT NOCHECK NONCLUSTERED NULL 
							OF OFF OFFSETS ON ONCE ONLY OPEN OPENDATASOURCE OPTION ORDER 
							OVER PERCENT PERM PERMANENT PIPE PLAN PREPARE PRIMARY PRINT PRIVILEGES 
							PROC PROCEDURE PROCESSEXIT PUBLIC RAISERROR READ READTEXT RECONFIGURE REFERENCES REPEATABLE 
							REPLICATION RESTORE RESTRICT RETURNS RETURN REVOKE ROLLBACK ROWCOUNT ROWGUIDCOL RULE 
							SAVE SCHEMA SELECT SERIALIZABLE SET SETUSER SHUTDOWN STATISTICS TABLE TAPE 
							TEMP TEMPORARY TEXTSIZE THEN TO TOP TRAN TRANSACTION TRIGGER TRUNCATE 
							TSEQUAL UNCOMMITTED UNION UNIQUE UPDATE UPDATETEXT USE VALUES VIEW WAITFOR 
							WHEN WHERE WHILE WITH WORK WRITETEXT 
						&lt;/ExplicitPatterns&gt;
					&lt;/ExplicitPatternGroup&gt;
					&lt;ExplicitPatternGroup TokenKey="FunctionToken" Style="FunctionStyle" LookAhead="{NonWordMacro}|\z"&gt;
						&lt;ExplicitPatterns&gt;
							ABS ACOS APP_NAME ASCII ASIN ATAN ATN2 AVG CASE CAST 
							CEILING CHARINDEX COALESCE COL_LENGTH COL_NAME COLUMNPROPERTY CONTAINSTABLE CONVERT COS COT 
							COUNT CURRENT_TIMESTAMP CURRENT_USER CURSOR_STATUS DATABASEPROPERTY DATALENGTH DATEADD DATEDIFF DATENAME DATEPART 
							DAY DB_ID DB_NAME DEGREES DIFFERENCE EXP FILE_ID FILE_NAME FILEGROUP_ID FILEGROUP_NAME 
							FILEGROUPPROPERTY FILEPROPERTY FLOOR FORMATMESSAGE FREETEXTTABLE FULLTEXTCATALOGPROPERTY FULLTEXTSERVICEPROPERTY GETANSINULL GETDATE GROUPING 
							HOST_ID HOST_NAME IDENT_INCR IDENT_SEED IDENTITY INDEX_COL INDEXPROPERTY IS_MEMBER IS_SRVROLEMEMBER ISDATE 
							ISNULL ISNUMERIC LEN LOG LOG10 LOWER LTRIM MAX MIN MONTH 
							NEWID NULLIF OBJECT_ID OBJECT_NAME OBJECTPROPERTY OPENQUERY OPENROWSET PARSENAME PATINDEX PERMISSIONS 
							PI POWER QUOTENAME RADIANS RAND REPLACE REPLICATE REVERSE ROUND RTRIM 
							SCOPE_IDENTITY SESSION_USER SIGN SIN SOUNDEX SPACE SQRT SQUARE STATS_DATE STDEV 
							STDEVP STR STUFF SUBSTRING SUM SUSER_ID SUSER_NAME SUSER_SID SUSER_SNAME SYSTEM_USER 
							TAN TEXTPTR TEXTVALID TYPEPROPERTY UNICODE UPPER USER USER_ID USER_NAME VAR 
							VARP YEAR 
						&lt;/ExplicitPatterns&gt;
					&lt;/ExplicitPatternGroup&gt;
					&lt;ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle"&gt;
						&lt;ExplicitPatterns&gt;
							+ - * / % ~ &amp;amp; | ^ = 
							&amp;gt; &amp;lt; &amp;gt;= &amp;lt;= &amp;lt;&amp;gt; != !&amp;gt; !&amp;lt; 
						&lt;/ExplicitPatterns&gt;
					&lt;/ExplicitPatternGroup&gt;
					&lt;ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle" LookAhead="{NonWordMacro}|\z"&gt;
						&lt;ExplicitPatterns&gt;
							ALL AND ANY BETWEEN EXISTS IN LEFT JOIN LIKE NOT 
							OR OUTER RIGHT SOME 
						&lt;/ExplicitPatterns&gt;
					&lt;/ExplicitPatternGroup&gt;
					&lt;ExplicitPatternGroup TokenKey="DataTypeToken" Style="DataTypeStyle" LookAhead="{NonWordMacro}|\z"&gt;
						&lt;ExplicitPatterns&gt;
							bigint binary bit char character datetime dec decimal double float 
							int integer image long money national nchar ntext number nvarchar 
							precision raw real single smalldatetime smallint smallmoney text timestamp tinyint 
							uniqueidentifier varbinary varchar varchar2 varying 
						&lt;/ExplicitPatterns&gt;
					&lt;/ExplicitPatternGroup&gt;
					&lt;RegexPatternGroup TokenKey="IdentifierToken" PatternValue="{AlphaMacro}({WordMacro})*" /&gt;
					&lt;RegexPatternGroup TokenKey="VariableToken" Style="VariableStyle" PatternValue="@ {WordMacro}+" LookAhead="{NonWordMacro}|\z" /&gt;
					&lt;RegexPatternGroup TokenKey="SystemVariableToken" Style="SystemVariableStyle" PatternValue="@@ {WordMacro}+" LookAhead="{NonWordMacro}|\z" /&gt;
					&lt;RegexPatternGroup TokenKey="NumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+ (\. {DigitMacro}+)?" LookAhead="{NonWordMacro}|\z" /&gt;
					&lt;RegexPatternGroup TokenKey="HexNumberToken" Style="NumberStyle" PatternValue="0 [x | X] {HexDigitMacro}+" LookAhead="{NonWordMacro}|\z" /&gt;
				&lt;/PatternGroups&gt;
				&lt;!-- Child States --&gt;
				&lt;ChildStates&gt;
					&lt;ChildState Key="StringState" /&gt;
					&lt;ChildState Key="SquareStringState" /&gt;
					&lt;ChildState Key="CommentState" /&gt;
					&lt;ChildState Key="MultiLineCommentState" /&gt;
				&lt;/ChildStates&gt;
			&lt;/State&gt;
			&lt;!-- StringState State --&gt;
			&lt;State Key="StringState" TokenKey="StringDefaultToken" Style="StringDefaultStyle"&gt;
				&lt;!-- Scopes --&gt;
				&lt;Scopes&gt;
					&lt;Scope&gt;
						&lt;ExplicitPatternGroup Type="StartScope" TokenKey="StringStartToken" Style="StringDelimiterStyle" PatternValue="'" /&gt;
						&lt;ExplicitPatternGroup Type="EndScope" TokenKey="StringEndToken" Style="StringDelimiterStyle" PatternValue="'" /&gt;
					&lt;/Scope&gt;
				&lt;/Scopes&gt;
				&lt;!-- Pattern Groups --&gt;
				&lt;PatternGroups&gt;
					&lt;RegexPatternGroup TokenKey="StringDefaultToken" PatternValue="[^']+" /&gt;
				&lt;/PatternGroups&gt;
			&lt;/State&gt;
			&lt;!-- SquareStringState State --&gt;
			&lt;State Key="SquareStringState" TokenKey="SquareStringDefaultToken" Style="StringDefaultStyle"&gt;
				&lt;!-- Scopes --&gt;
				&lt;Scopes&gt;
					&lt;Scope&gt;
						&lt;ExplicitPatternGroup Type="StartScope" TokenKey="SquareStringStartToken" Style="StringDelimiterStyle" PatternValue="[" /&gt;
						&lt;ExplicitPatternGroup Type="EndScope" TokenKey="SquareStringEndToken" Style="StringDelimiterStyle" PatternValue="]" /&gt;
					&lt;/Scope&gt;
				&lt;/Scopes&gt;
				&lt;!-- Pattern Groups --&gt;
				&lt;PatternGroups&gt;
					&lt;RegexPatternGroup TokenKey="SquareStringDefaultToken" PatternValue="[^\]]+" /&gt;
				&lt;/PatternGroups&gt;
			&lt;/State&gt;
			&lt;!-- CommentState State --&gt;
			&lt;State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle"&gt;
				&lt;!-- Scopes --&gt;
				&lt;Scopes&gt;
					&lt;Scope&gt;
						&lt;RegexPatternGroup Type="StartScope" TokenKey="RegionStartToken" Style="CommentDelimiterStyle" PatternValue="-- {WhitespaceMacro}* Region" LookAhead="{NonWordMacro}|\z" /&gt;
						&lt;RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" /&gt;
					&lt;/Scope&gt;
					&lt;Scope&gt;
						&lt;RegexPatternGroup Type="StartScope" TokenKey="EndRegionStartToken" Style="CommentDelimiterStyle" PatternValue="-- {WhitespaceMacro}* End {WhitespaceMacro}? Region" LookAhead="{NonWordMacro}|\z" /&gt;
						&lt;RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" /&gt;
					&lt;/Scope&gt;
					&lt;Scope&gt;
						&lt;ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="--" /&gt;
						&lt;RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" /&gt;
					&lt;/Scope&gt;
				&lt;/Scopes&gt;
				&lt;!-- Pattern Groups --&gt;
				&lt;PatternGroups&gt;
					&lt;RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}+" /&gt;
				&lt;/PatternGroups&gt;
			&lt;/State&gt;
			&lt;!-- MultiLineCommentState State --&gt;
			&lt;State Key="MultiLineCommentState" TokenKey="MultiLineCommentDefaultToken" Style="CommentDefaultStyle"&gt;
				&lt;!-- Scopes --&gt;
				&lt;Scopes&gt;
					&lt;Scope BracketHighlight="True"&gt;
						&lt;ExplicitPatternGroup Type="StartScope" TokenKey="MultiLineCommentStartToken" Style="CommentDelimiterStyle" PatternValue="/*" EndBracket="" /&gt;
						&lt;ExplicitPatternGroup Type="EndScope" TokenKey="MultiLineCommentEndToken" Style="CommentDelimiterStyle" PatternValue="*/" StartBracket="" /&gt;
					&lt;/Scope&gt;
				&lt;/Scopes&gt;
				&lt;!-- Pattern Groups --&gt;
				&lt;PatternGroups&gt;
					&lt;RegexPatternGroup TokenKey="MultiLineCommentDefaultToken" PatternValue="[^\*]+" /&gt;
				&lt;/PatternGroups&gt;
			&lt;/State&gt;
		&lt;/States&gt;
		&lt;!-- Example Text --&gt;
		&lt;ExampleText&gt;&lt;![CDATA[/* 
 * Stored Procedure 
 */		
CREATE PROCEDURE titles_sum
	@TITLE varchar(40) = '%',
	@SUM money OUTPUT
AS

-- Region Variable Declarations
declare @Unused int
-- End Region

-- Select records
SELECT @SUM = SUM(price)
FROM [book titles]
WHERE title LIKE @TITLE
IF @@ERROR &lt;&gt; 0
	PRINT 'An error occurred']]&gt;&lt;/ExampleText&gt;
	&lt;/SyntaxLanguage&gt;
&lt;/SyntaxLanguages&gt;</value>
  </data>
</root>